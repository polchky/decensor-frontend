import Vue from 'vue';
import VueI18n from 'vue-i18n';

Vue.use(VueI18n);

const messages = {
    en: {
        general: {
            mainTitle: 'Reactive IOT',
            navigation: 'Navigation',
            warning: 'Warning',
            error: 'Error',
            open: 'Open',
            close: 'Close',
            cancel: 'Cancel',
            save: 'Save',
            delete: 'Delete',
            searchPoint: 'Search...',
            notFound: 'Not found',
            firstname: 'Firstname',
            lastname: 'Lastname',
            created_at: 'Created at',
            settings: 'Settings',
            updateSuccess: 'Update successfully done',
            update: 'Update',
            numberInvalid: 'Invalid number',
            integerInvalid: 'Invalid integer',
            filter: 'Filter',
            type: 'Type',
            from: 'From',
            to: 'To',

        },
        graph: {
            graph: 'Graph',
            explorer: 'Graph explorer',
        },
        actions: {
            title: 'List of actions',
            actions: 'Actions',
            actionsList: 'List of actions ({count})',
            client: 'Receiving client',
            actionTemplate: 'Action template',
            useFilter: 'Please use filters to display actions',
        },
        actionstype: {
            title: 'List of action types',
            actionsType: 'Action types',
            newActionType: 'New action type',
            listActionsType: 'List of action types ({count})',
            actionTypeCreated: 'Action type successfully created !',
            actionTypeUpdated: 'Action type successfully updated !',
            actionTypeDeleted: 'Action type successfully deleted !',
            actionTypeAlreadyExists: 'This action type already exists !',
            deleteActionType: 'Delete this action type',
            deleteActionTypeWarning: 'Warning, this will delete the action type !',
        },
        actionTemplate: {
            title: 'List of action templates',
            actionTemplatesCount: 'List of the action templates ({count})',
            actionTemplateName: 'Name',
            actionTemplates: 'Action Templates',
            newActionTemplate: 'New action template',
            actionTemplateCreated: 'Action template successfully created !',
            actionTemplateUpdated: 'Action template successfully updated !',
            actionTemplateDeleted: 'Action template successfully deleted !',
            actionTemplateAlreadyExists: 'This action template already exists !',
            deleteActionTemplate: 'Delete this action template',
            deleteActionTemplateWarning: 'Warning, this will delete the action template !',
            actionType: 'Action type',
            actionTypeRequired: 'The action type is required',
            functionTooLong: 'The function is too long and must be max 4096 length long',
            activeActionTemplate: 'Active action template',
            activeActionTemplateActive: 'This will activate/deactivate an action template',
            rule: 'Rule',
            ruleRequired: 'The rule is required',
            newClient: 'Add a client',
            clients: 'Clients',
            eventProperties: 'Event properties',
            actionProperties: 'Action properties',
        },
        clients: {
            id: 'ID of the client',
            clients: 'Clients',
            clientsList: 'List of clients',
            clientsListRegistered: 'List of the clients registered ({count})',
            registerClient: 'Register a new client',
            clientName: 'Client name',
            pubkey: 'Client public key',
            adminClients: 'Admin client',
            activeClients: 'Active client',
            clientExists: 'This client already exists',
            clientCreated: 'Client created with success !',
            clientUpdated: 'Client updated with success !',
            clientDelete: 'Delete this client',
            clientDeleteWarning: 'Warning this action will delete the client',
            clientDeleted: 'Client deleted with success !',
            actionMessage: 'Action message',
            seeActionMessage: 'See all the actions message for this client',
            lastActionMessage: 'Last action message',
        },
        events: {
            events: 'Events',
            title: 'List of events',
            fireEvent: 'Fire a new event',
            eventsList: 'List of the events ({count})',
            client: 'Client',
            eventType: 'Event types',
            properties: 'Properties ({count})',
            clientRequired: 'A client is required',
            eventTypeRequired: 'An event type is required',
            eventCreated: 'Event fired with success!',
            deleteEvent: 'Delete this event',
            deleteEventWarning: 'Warning, this will delete this event !',
            eventDeleted: 'Event deleted !',
            useFilter: 'Please use the filter to display events',
        },
        rules: {
            rules: 'Rules',
            title: 'List of rules',
            rulesCount: 'List of the rules ({count})',
            newRule: 'New Rule',
            ruleName: 'Rule name',
            eventType: 'Event type',
            actionType: 'Action type',
            clients: 'Clients',
            urls: 'Urls',
            function: 'Function',
            eventProperties: 'Event properties',
            actionProperties: 'Action properties',
            functionTooLong: 'The function is too long and must be max 4096 length long',
            eventTypeRequired: 'The event type is required',
            actionTypeRequired: 'The action type is required',
            validFunction: 'The function must be a valid javascript expression ! (a > 0) || (a < 0 && b != "outdoor"',
            action: 'Action',
            actionTypeDictError: 'The action result must be in dict format',
            propertyMissing: 'The property {property} is missing',
            actionPropNotFound: 'The property {prop} was not found for the action {action}',
            actionEvalIncorrect: 'The expression for the action {action} is incorrect',
            clientsRequired: 'You must select at least a client',
            urlsRequired: 'You must select at least a url',
            ruleExists: 'This rule already exists',
            ruleCreated: 'Rule created with success !',
            ruleUpdated: 'Rule updated with success !',
            ruleDeleted: 'Rule deleted with success !',
            deleteRule: 'Delete this rule',
            deleteAction: 'Delete this action',
            deleteRuleWarning: 'Warning, this action will delete the rule !',
            deleteActionWarning: 'Warning, this action will delete the action !',
            activeRule: 'Active rule',
            activeRuleActive: 'This action will activate/deactivate a rule',
            newAction: 'New action',
            editAction: 'Edit action',
            noActionTypeSelected: 'No action type selected',
            actionExists: 'This action already exists',
            actionCreated: 'Action successfully created !',
            actionUpdated: 'Action successfully updated !',
            actionDeleted: 'Action successfully updated !',
            actions: 'Actions ({count})',
        },
        eventstype: {
            fire: 'Fire',
            title: 'List of event types',
            eventstype: 'Events types',
            newEventType: 'New event type',
            listEventsType: 'List of events type ({count})',
            name: 'Event type name',
            typename: 'Type name',
            newScheme: 'New scheme',
            scheme: 'Scheme',
            propertyAdded: 'New property added',
            propertyRemoved: 'Property removed',
            eventTypeAlreadyExists: 'This event type already exists !',
            newEventTypeUpdated: 'Event type updated with success !',
            newEventTypeCreated: 'Event type created with success !',
            deleteEventType: 'Delete this event type',
            deleteEventTypeWarning: 'Warning, this action will delete the event type !',
            eventTypeDeleted: 'Event type deleted',
            required: 'required',
        },
        urls: {
            urls: 'Urls',
            urlsList: 'List of Urls',
            newUrl: 'New Url',
            urlsCount: 'List of Urls ({count})',
            editUrl: 'Edit Url',
            fullUrlName: 'Full Url name',
            urlExists: 'This url already exists',
            urlCreated: 'Url successfully created',
            urlUpdated: 'Url successfully updated',
            urlDeleted: 'Url deleted',
            deleteUrl: 'Delete Url',
            deleteUrlWarning: 'Warning, this will delete the Url !',
            clientRequired: 'A client is required',
        },
        admin: {
            administration: 'Administration',
            users: {
                users: 'Users',
                usersList: 'Users list',
                updatedRolesUser: 'User roles updated',
                filteredUsers: 'Users ({count})',
                userDetails: 'User details',
                userInformations: 'General user informations',
                deleteUserWarning: 'Warning, this action will delete the user',
                userRoles: 'User roles',
                activeAccount: 'Active account',
                activateDeactivateAccount: 'Activate or deactivate user account',
                adminAccount: 'Admin account',
                activateDeactivateAdmin: 'Activate or deactivate admin role',
                deleteUser: 'Delete user account',
                userDeleted: 'User deleted',
            },
            keys: {
                keypair: 'Keypair',
                keypairlist: 'Keypair list',
                keypairdetails: 'Keypair details',
                noKeypair: 'There are no keypairs registred in the enclave',
                keyPairList: 'Current valid keypairs registered in the enclave',
                deleteKeypair: 'Revoke this keypair',
                warningDeleteKeyPair: 'Warning, this action will revoke the keypair in the enclave',
                serverPublicKey: 'Server public key (JWK)',
                clientPrivateKey: 'Client private key (JWK)',
            },
        },
        input: {
            requiredField: 'This field is required',
            rangeChars: 'This field must must have between {min} and {max}',
        },
        login: {
            keyValid: 'The key must be a valid, 64 chars hex key',
            login: 'Login',
            loginTitle: 'Login page',
            loginButton: 'Login',
            logout: 'Logout',
            failure: 'The email or password provided is incorrect',
            email: 'Email address',
            emailValid: 'The email address must be valid',
            passwordTitle: 'Password',
            passwordHint: 'Must be between 6 and 16 characters',
            changePassword: 'Change the password',
            clientId: 'clietn ID',
        },
        register: {
            register: 'Register',
            createNewAccount: 'Create a new account',
            userExists: 'This user account already exists',
            userAccountCreated: 'User account created with success!',
        },
        crypto: {
            errorWhileGeneratingKey: 'Error during the generation of the shared secret. This application does not work...',
        },
    },
};

const i18n = new VueI18n({
    locale: 'en',
    messages,
});

export default i18n;
